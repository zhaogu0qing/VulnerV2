# coding:utf8
"""
Created by zhaoguoqing on 18/11/4
"""
from bson import ObjectId
from flask import (
    Blueprint, flash, g, redirect, render_template, request, session, url_for, jsonify, abort
)

from .forms import VulnerEditForm
from .models import *
from . import db

bp = Blueprint('vulner', __name__, url_prefix='/vulner')


@bp.route('/all/page/<int:page_num>', methods=('GET',))
def get_all(page_num=1):
    pagination = Vulner.query.paginate(page=page_num, per_page=10)
    return render_template('vulner/showAll.html', title='所有漏洞', pagination=pagination)

@bp.route('/detail/<string:vulner_id>', methods=('GET',))
def get_detail(vulner_id):
    vulner = Vulner.query.get_or_404(vulner_id)
    return render_template('vulner/showDetail.html', vulner=vulner)

@bp.route('/new', methods=('POST', 'GET'))
def new():
    form = VulnerEditForm()
    vulner = Vulner()
    if request.method == 'POST' and form.validate_on_submit():
        vulner.title = form.title.data
        vulner.CNNVDId = form.CNNVDId.data
        vulner.CVEId = form.CVEId.data
        vulner.publishTime = form.publishTime.data
        vulner.updateTime = form.updateTime.data
        vulner.vulnerSource = form.vulnerSource.data
        vulner.vulnerLevel = form.vulnerLevel.data
        vulner.vulnerType = form.vulnerType.data
        vulner.threatType = form.threatType.data
        vulner.firm = form.firm.data
        vulner.vulnerSummary = form.vulnerSummary.data
        vulner.vulnerBulletin = form.vulnerBulletin.data
        vulner.vulnerReference = form.vulnerReference.data
        vulner.vulnerAffect = form.vulnerAffect.data
        vulner.vulnerPatch = form.vulnerPatch.data
        vulner.source = form.source.data

        vulner.url = ''
        vulner.tag = ''
        vulner.save()
        flash("新建成功")
        return redirect(url_for('index'))
    return render_template('vulner/editDetail.html', vulner=vulner, form=form, title='新建')

@bp.route('/edit/<string:vulner_id>', methods=('GET', 'POST'))
def edit(vulner_id):
    form = VulnerEditForm()
    vulner = Vulner.query.get_or_404(vulner_id)
    if request.method == 'POST' and form.validate_on_submit():
        vulner.title = form.title.data
        vulner.CNNVDId = form.CNNVDId.data
        vulner.CVEId = form.CVEId.data
        vulner.publishTime = form.publishTime.data
        vulner.updateTime = form.updateTime.data
        vulner.vulnerSource = form.vulnerSource.data
        vulner.vulnerLevel = form.vulnerLevel.data
        vulner.vulnerType = form.vulnerType.data
        vulner.threatType = form.threatType.data
        vulner.firm = form.firm.data
        vulner.vulnerSummary = form.vulnerSummary.data
        vulner.vulnerBulletin = form.vulnerBulletin.data
        vulner.vulnerReference = form.vulnerReference.data
        vulner.vulnerAffect = form.vulnerAffect.data
        vulner.vulnerPatch = form.vulnerPatch.data
        vulner.source = form.source.data
        vulner.save()
        flash("更新成功")
        return redirect(url_for('index'))
    form.title.data = vulner.title
    form.CNNVDId.data = vulner.CNNVDId
    form.CVEId.data = vulner.CVEId
    form.source.data = vulner.source
    form.publishTime.data = vulner.publishTime
    form.updateTime.data = vulner.updateTime
    form.vulnerSource.data = vulner.vulnerSource
    form.vulnerLevel.data = vulner.vulnerLevel
    form.vulnerType.data = vulner.vulnerType
    form.threatType.data = vulner.threatType
    form.tag.data = vulner.tag
    form.vulnerSummary.data = vulner.vulnerSummary
    form.vulnerBulletin.data = vulner.vulnerBulletin
    form.vulnerReference.data = vulner.vulnerReference
    form.vulnerAffect.data = vulner.vulnerAffect
    form.vulnerPatch.data = vulner.vulnerPatch

    return render_template('vulner/editDetail.html', vulner=vulner, form=form, title='编辑')

@bp.route('delete/<string:vulner_id>', methods=['GET', 'POST'])
def delete(vulner_id):
    v = Vulner.query.get_or_404(vulner_id)
    v.remove()
    return redirect(url_for('vulner.get_all', page_num=1))

def search(key):
    vulners = []
    for v in db.get_db()['Vulner'].find({'title': {'$regex': key, '$options': "$i"}}).limit(15):
        v['mongo_id'] = str(v['_id'])
        del v['_id']
        vulners.append(v)
    return vulners

def get_recommend():
    vulners = []
    for v in db.get_db()['Vulner'].find({'tag': 'hot'}).limit(5):
        v['mongo_id'] = str(v['_id'])
        del v['_id']
        vulners.append(v)
    return vulners

@bp.route('recommend/<string:vulner_id>', methods=['GET', 'POST'])
def recommend(vulner_id):
    Collection = db.get_db()['Vulner']
    v = Collection.find_one({'_id': ObjectId(vulner_id)})
    if not v:
        abort(404)
    Collection.update({'_id': ObjectId(vulner_id)}, {'$set': {'tag': 'hot'}})
    flash('推荐成功')
    return redirect(url_for('vulner.get_all', page_num=1))

@bp.route('un_recommend/<string:vulner_id>', methods=['GET', 'POST'])
def un_recommend(vulner_id):
    Collection = db.get_db()['Vulner']
    v = Collection.find_one({'_id': ObjectId(vulner_id)})
    if not v:
        abort(404)
    Collection.update({'_id': ObjectId(vulner_id)}, {'$set': {'tag': ''}})
    flash('取消推荐成功')
    return redirect(url_for('vulner.get_all', page_num=1))